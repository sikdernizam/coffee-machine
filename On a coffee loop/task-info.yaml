type: edu
custom_name: stage5
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class CoffeeMachine {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            //stage 1
    //        String msg = "Starting to make a coffee\n" +
    //                "Grinding coffee beans\n" +
    //                "Boiling water\n" +
    //                "Mixing boiled water with crushed coffee beans\n" +
    //                "Pouring coffee into the cup\n" +
    //                "Pouring some milk into the cup\n" +
    //                "Coffee is ready!";

            //stage 2
    //        String input = "Write how many cups of coffee you will need";
    //        System.out.println(input);
    //        int response = scanner.nextInt();
    //        int water = response * 200;
    //        int milk = response * 50;
    //        int beans = response * 15;
    //        String outPut = "For " + response + " cups of coffee you will need:\n" +
    //                water + " ml of water\n" +
    //                milk + " ml of milk\n" +
    //                beans + " g of coffee beans";
    //        System.out.println(outPut);
            //stage 3
    //        final int[] requires = {200, 50, 15, 1};
    //        String[] questions = new String[]{"Write how many ml of water the coffee machine has: ",
    //                "Write how many ml of milk the coffee machine has:",
    //                "Write how many grams of coffee beans the coffee machine has: ",
    //                "Write how many cups of coffee you will need: "};
    //        int[] needs = new int[4];
    //
    //        System.out.println(questions[0]);
    //        needs[0] = scanner.nextInt();
    //        System.out.println(questions[1]);
    //        needs[1] = scanner.nextInt();
    //        System.out.println(questions[2]);
    //        needs[2] = scanner.nextInt();
    //        System.out.println(questions[3]);
    //        needs[3] = scanner.nextInt();
    //        int actual0 = Math.min(needs[0] / requires[0], needs[1] / requires[1]);
    //        int actual1 = Math.min(actual0, needs[2] / requires[2]);
    //
    //        System.out.println(actual1);
    //
    //        if (needs[0] / requires[0] == needs[3]) {
    //            System.out.println("Yes, I can make that amount of coffee");
    //        } else if (needs[0] / requires[0] < needs[3]) {
    //            System.out.println("No, I can make only " + needs[0] / requires[0] + " cup(s) of coffee");
    //        } else if (needs[0] / requires[0] > needs[3]) {
    //            System.out.println("Yes, I can make that amount of coffee (and even " + (Math.abs(actual1 - requires[3])) + " more than that)");
    //        }
            //stage 4
            int[] stock = {400, 540, 120, 9, 550};
            int[] espresso = {250, 100, 16, 4};
            int[] latte = {350, 75, 20, 7};
            int[] cappuccino = {200, 100, 12, 6};
            String[] boot = {"of water", "of milk", "of coffee beans", "of disposable cups", "of money"
            };
            String bootMsg = "The coffee machine has:\n"
                    + stock[0] + " of water\n"
                    + stock[1] + " of milk\n"
                    + stock[2] + " of coffee beans\n"
                    + stock[3] + " of disposable cups\n"
                    + stock[4] + " of money";
            System.out.println(bootMsg);
            System.out.println();
            System.out.println("Write action (buy, fill, take): ");
            String[] input = {"buy", "fill", "take"};
            String[] questions = {"What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino: ",
                    "Write how many ml of water do you want to add:",
                    "I gave you"
            };
            String response;
            response = scanner.next();
            int buy;
            int[] fill = {};
            int take;
            String[] fillQuestions = {"Write how many ml of water do you want to add: ",
                    "Write how many ml of milk do you want to add: ",
                    "Write how many grams of coffee beans do you want to add:",
                    "Write how many disposable cups of coffee do you want to add: "};
            int[] fillAns = new int[4];
            switch (response) {
                case "buy":
                    System.out.println(questions[0]);
                    buy = scanner.nextInt();
                    System.out.println();
                    switch (buy) {
                        case 1:
                            bootMsg = "The coffee machine has:\n"
                                    + (stock[0] - espresso[0]) + " of water\n"
                                    + (stock[1]) + " of milk\n"
                                    + (stock[2] - espresso[2]) + " of coffee beans\n"
                                    + (stock[3] - 1) + " of disposable cups\n"
                                    + (stock[4] + espresso[3]) + " of money";
                            System.out.println(bootMsg);
                            break;
                        case 2:
                            bootMsg = "The coffee machine has:\n"
                                    + (stock[0] - latte[0]) + " of water\n"
                                    + (stock[1] - latte[1]) + " of milk\n"
                                    + (stock[2] - latte[2]) + " of coffee beans\n"
                                    + (stock[3] - 1) + " of disposable cups\n"
                                    + (stock[4] + latte[3]) + " of money";
                            System.out.println(bootMsg);
                            break;
                        case 3:
                            bootMsg = "The coffee machine has:\n"
                                    + (stock[0] - cappuccino[0]) + " of water\n"
                                    + (stock[1] - cappuccino[1]) + " of milk\n"
                                    + (stock[2] - cappuccino[2]) + " of coffee beans\n"
                                    + (stock[3] - 1) + " of disposable cups\n"
                                    + (stock[4] + cappuccino[3]) + " of money";
                            System.out.println(bootMsg);
                            break;
                    }
                    break;
                case "fill":
                    System.out.println(fillQuestions[0]);
                    fillAns[0] = scanner.nextInt();
                    System.out.println(fillQuestions[1]);
                    fillAns[1] = scanner.nextInt();
                    System.out.println(fillQuestions[2]);
                    fillAns[2] = scanner.nextInt();
                    System.out.println(fillQuestions[3]);
                    fillAns[3] = scanner.nextInt();
                    bootMsg = "The coffee machine has:\n"
                            + (stock[0] + fillAns[0]) + " of water\n"
                            + (stock[1] + fillAns[1]) + " of milk\n"
                            + (stock[2] + fillAns[2]) + " of coffee beans\n"
                            + (stock[3] + fillAns[3]) + " of disposable cups\n"
                            + (stock[4]) + " of money";
                    System.out.println(bootMsg);
                    break;
                case "take":
                    System.out.println(questions[2] + " $" + stock[4]);
                    System.out.println();
                    bootMsg = "The coffee machine has:\n"
                            + (stock[0] + fillAns[0]) + " of water\n"
                            + (stock[1] + fillAns[1]) + " of milk\n"
                            + (stock[2] + fillAns[2]) + " of coffee beans\n"
                            + (stock[3] + fillAns[3]) + " of disposable cups\n"
                            + (stock[4] - stock[4]) + " of money";
                    System.out.println(bootMsg);
                    break;
            }

        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/179/implement
status: Solved
record: 5
