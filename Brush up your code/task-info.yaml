type: edu
custom_name: stage6
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class CoffeeMachine {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            //stage 1
    //        String msg = "Starting to make a coffee\n" +
    //                "Grinding coffee beans\n" +
    //                "Boiling water\n" +
    //                "Mixing boiled water with crushed coffee beans\n" +
    //                "Pouring coffee into the cup\n" +
    //                "Pouring some milk into the cup\n" +
    //                "Coffee is ready!";

            //stage 2
    //        String input = "Write how many cups of coffee you will need";
    //        System.out.println(input);
    //        int response = scanner.nextInt();
    //        int water = response * 200;
    //        int milk = response * 50;
    //        int beans = response * 15;
    //        String outPut = "For " + response + " cups of coffee you will need:\n" +
    //                water + " ml of water\n" +
    //                milk + " ml of milk\n" +
    //                beans + " g of coffee beans";
    //        System.out.println(outPut);
            //stage 3
    //        final int[] requires = {200, 50, 15, 1};
    //        String[] questions = new String[]{"Write how many ml of water the coffee machine has: ",
    //                "Write how many ml of milk the coffee machine has:",
    //                "Write how many grams of coffee beans the coffee machine has: ",
    //                "Write how many cups of coffee you will need: "};
    //        int[] needs = new int[4];
    //
    //        System.out.println(questions[0]);
    //        needs[0] = scanner.nextInt();
    //        System.out.println(questions[1]);
    //        needs[1] = scanner.nextInt();
    //        System.out.println(questions[2]);
    //        needs[2] = scanner.nextInt();
    //        System.out.println(questions[3]);
    //        needs[3] = scanner.nextInt();
    //        int actual0 = Math.min(needs[0] / requires[0], needs[1] / requires[1]);
    //        int actual1 = Math.min(actual0, needs[2] / requires[2]);
    //
    //        System.out.println(actual1);
    //
    //        if (needs[0] / requires[0] == needs[3]) {
    //            System.out.println("Yes, I can make that amount of coffee");
    //        } else if (needs[0] / requires[0] < needs[3]) {
    //            System.out.println("No, I can make only " + needs[0] / requires[0] + " cup(s) of coffee");
    //        } else if (needs[0] / requires[0] > needs[3]) {
    //            System.out.println("Yes, I can make that amount of coffee (and even " + (Math.abs(actual1 - requires[3])) + " more than that)");
    //        }
            //stage 4
            int[] initialStock = {400, 540, 120, 9, 550};
            int[] currentStock = new int[5];
            int[] espresso = {250, 0, 16, 1, 4};
            int[] latte = {350, 75, 20, 1, 7};
            int[] cappuccino = {200, 100, 12, 1, 6};
            String[] description = {" of water\n", " of milk\n", " of coffee beans\n", " of disposable cups\n", " of money"
            };
            String bootMsg = "";

            String[] questions = {"What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu: ",
                    "Write how many ml of water do you want to add:",
                    "I gave you"
            };
            int[] fill = {};
            String[] fillQuestions = {"Write how many ml of water do you want to add: ",
                    "Write how many ml of milk do you want to add: ",
                    "Write how many grams of coffee beans do you want to add:",
                    "Write how many disposable cups of coffee do you want to add: "};
            String hasResource = "I have enough resources, making you a coffee!";
            String hasNoResource = "Sorry, not enough water!";
            String response = "";
            int[] fillResponse = new int[4];
            String buy;
            while (response != "exit") {
                System.out.println("Write action (buy, fill, take, remaining, exit): ");
                response = scanner.next();
                switch (response) {
                    case "buy":
                        System.out.println();
                        System.out.println(questions[0]);
                        buy = scanner.next();
                        switch (buy) {
                            //espresso
                            case "1":
                                currentStock = new int[]{
                                        initialStock[0] - espresso[0],
                                        initialStock[1] - espresso[1],
                                        initialStock[2] - espresso[2],
                                        initialStock[3] - espresso[3],
                                        initialStock[4] + espresso[4],
                                };
                                initialStock = currentStock;
                                break;
                            //latte
                            case "2":
                                if (initialStock[0] >= latte[0]) {
                                    System.out.println(hasResource);
                                    System.out.println();
                                    currentStock = new int[]{
                                            initialStock[0] - latte[0],
                                            initialStock[1] - latte[1],
                                            initialStock[2] - latte[2],
                                            initialStock[3] - latte[3],
                                            initialStock[4] + latte[4],
                                    };
                                    initialStock = currentStock;
                                } else {
                                    System.out.println(hasNoResource);
                                    System.out.println();
                                }
                                break;
                            //cappuccino
                            case "3":
                                currentStock = new int[]{
                                        initialStock[0] - cappuccino[0],
                                        initialStock[1] - cappuccino[1],
                                        initialStock[2] - cappuccino[2],
                                        initialStock[3] - cappuccino[3],
                                        initialStock[4] + cappuccino[4],
                                };
                                initialStock = currentStock;
                                break;
                            case "back":
                                break;
                        }
                        break;
                    case "fill":
                        System.out.println();
                        for (int i = 0; i < fillQuestions.length; i++) {
                            System.out.println(fillQuestions[i]);
                            fillResponse[i] = scanner.nextInt();
                        }
                        currentStock = new int[]{
                                initialStock[0] + fillResponse[0],
                                initialStock[1] + fillResponse[1],
                                initialStock[2] + fillResponse[2],
                                initialStock[3] + fillResponse[3],
                                initialStock[4] + 0,
                        };
                        initialStock = currentStock;
                        System.out.println();
                        break;
                    case "take":
                        System.out.println();
                        System.out.println(questions[2] + " $" + initialStock[4]);
                        currentStock = new int[]{
                                initialStock[0],
                                initialStock[1],
                                initialStock[2],
                                initialStock[3],
                                initialStock[4] - initialStock[4],
                        };
                        initialStock = currentStock;
                        System.out.println();
                        break;
                    case "remaining":
                        System.out.println();
                        //if currentStock is not updated
                        bootMsg = "The coffee machine has:\n";
                        bootMsg += initialStock[0] + description[0]
                                + initialStock[1] + description[1]
                                + initialStock[2] + description[2]
                                + initialStock[3] + description[3]
                                + "$" + (initialStock[4]) + description[4];
                        System.out.println(bootMsg);
                        System.out.println();
                        break;
                    case "exit":
                        return;
                }
            }

        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/180/implement
status: Solved
record: 6
